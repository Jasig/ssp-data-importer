<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- @location specifies properties files in order of increasing precedence.

    So here we load packaged defaults first, i.e. with least priority, and any values therein can be overridden by
    config in an "external" file. The location of the latter is specified by setting a directory as a system property at
    startup (e.g. -Dssp.importer.configdir=/opt/sspimporter/config)

    We're doing this with the "old" <context:property-placeholder> mechanism rather than Environment/ApplicationContext
    initialization because the latter would make it effectively impossible to use the CommandLineJobRunner because
    the granularity of the start() method therein is such that we can't intercept/override the ApplicationContext
    configuration process.

    For setting Spring profiles, the assumption is that we'll use the special 'spring.profiles.active' system property.
    (e.g. -Dspring.profiles.active=postgres)
    -->
    <context:property-placeholder ignore-resource-not-found="true"
                                  location="classpath:ssp-importer.default.properties,
                                            file:${ssp.importer.configdir}/ssp-importer.properties"/>

</beans>