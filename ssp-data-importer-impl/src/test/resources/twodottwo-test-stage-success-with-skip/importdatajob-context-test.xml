<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
            http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Database Metadata Repositories  -->
    <bean id="tableMetaDataRepository" class="org.jasig.ssp.util.importer.job.validation.map.metadata.database.JdbcTableColumnMetadataRepository">
        <constructor-arg name="dataSource" ref ="dataSource"/>
        <property name="dateColumnNamePattern" value="${batch.jdbc.date.column.name.pattern}" />
    </bean>

    <bean id="columnMetadataRepository" class="org.jarbframework.constraint.metadata.database.JdbcColumnMetadataRepository">
        <constructor-arg name="dataSource" ref ="dataSource"/>
    </bean>
    <bean id="databaseConstraintRepository" class="org.jasig.ssp.util.importer.job.validation.map.metadata.database.CachingTableColumnMetadataRepository">
        <constructor-arg name="columnMetadataRepository" ref ="tableMetaDataRepository"/>
    </bean>

    <bean id="metadataRepository" class="org.jasig.ssp.util.importer.job.config.MetadataConfigurations" scope="singleton"/>


    <!-- PRE PROCESSING VERIFY INPUT FILE SOAK TIME COPY CONTENTS OF INPUT FOLDER -> PROCESS FOLDER -->
    <bean id="partialUploadGuard" class="org.jasig.ssp.util.importer.job.tasklet.PartialUploadGuard"
                                p:resources="${batch.tables.input.folder}/*.csv"
                                p:lagTimeBeforeStartInMinutes="${batch.tables.lagTimeBeforeStartInMinutes}"/>
    <bean id="batchInitializer" class="org.jasig.ssp.util.importer.job.tasklet.BatchInitializer"
                                p:resources="${batch.tables.input.folder}/*.csv"
                                p:duplicateResources="${batch.table.input.duplicate}"
                                p:processDirectory="${batch.tables.process.folder}"
                                p:upsertDirectory="${batch.tables.upsert.folder}"/>



    <bean id="processedRawCsvItemWriter" class="org.jasig.ssp.util.importer.job.csv.RawItemCsvWriter"
          scope="step"
          p:resource="#{stepExecutionContext[fileName]}" >
          <constructor-arg name="writeDirectory" value ="${batch.tables.upsert.folder}"/>
          <property name="appendAllowed" value="true" />
          <property name="lineAggregator">
               <bean class="org.jasig.ssp.util.importer.job.csv.RawItemLineAggregator">
               </bean>
        </property>
         <property name="headerCallback">
            <bean class="org.jasig.ssp.util.importer.job.csv.RawItemFlatFileHeaderCallback">
            </bean>
         </property>
    </bean>

    <!-- FINAL PROCESSING OF UPSERT FOLDER INSERT CONTENTS OF UPSERT FOLDER -> DATABASE  -->
    <bean  scope="step" id="singleFilteredCsvItemReader" class="org.jasig.ssp.util.importer.job.csv.RawItemCsvReader" >
        <property name="resource" value="#{stepExecutionContext[fileName]}"/>
    </bean>

    <bean  scope="step" id="compositeTableWriter"
        class="org.springframework.batch.item.support.CompositeItemWriter" >
        <property name="delegates">
             <list>
                 <ref local="stagingTableItemWriter"/>
                 <ref local="externalTableUpsertItemWriter"/>
             </list>
       </property>
    </bean>

    <bean  scope="step" id="partitioner" class="org.springframework.batch.core.partition.support.MultiResourcePartitioner">
        <property name="resources" value="twodottwo-test-stage-success-with-skip/*.csv"/>
    </bean>

    <bean id="processedItemValidateProcessor" class="org.jasig.ssp.util.importer.job.processor.ProcessedItemValidateProcessor"/>

    <bean id="stagingAndUpsertSkipListener" class="org.jasig.ssp.util.importer.job.listener.StagingAndUpsertSkipListener">
            <property name="metadataRepository" ref="metadataRepository" />
    </bean>
     <bean id="stagingAndUpsertListener" class="org.jasig.ssp.util.importer.job.listener.StagingAndUpsertListener"/>
     <bean id="validationSkipListener" class="org.jasig.ssp.util.importer.job.listener.ValidationSkipListener"/>
     <bean id="stagingTableTruncator" class="org.jasig.ssp.util.importer.job.listener.StagingTableTruncator"
             p:dataSource-ref="dataSource">
        <property name="metadataRepository" ref="metadataRepository" />
        <property name="truncateExclusions" value="${batch.truncate.exclusions}"></property>
    </bean>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="1"/>
    </bean>

    <batch:job id="importJob" restartable="false">
        <!-- === Start Core Job Step Definition == -->
        <batch:step id="stageFilteredItems"  >
             <batch:partition step="stageFilteredItemsSlave" partitioner="partitioner" >
                <batch:handler task-executor="taskExecutor" grid-size="1"/>
            </batch:partition>
            <batch:listeners>
                <batch:listener ref="stagingTableTruncator"/>
            </batch:listeners>
        </batch:step>
        <!-- Read validated files, write output to staging tables -->

        <!-- === End Core Job Step Definition == -->


        <!-- Use this for custom JobParameter validation, if necessary. Note that you get some simple validation for
        free by using or extending DefaultJobParametersValidator -->
        <!--
         <batch:validator ref="importJobValidator" />
         -->

        <!-- Watch for beforeJob() and afterJob() events here. Note that afterJob() is always fired unless
         the entire job crashes catastrophically. I.e. you can expect to handle job-level failures and successes
         in that event. -->
        <!--<batch:listeners></batch:listeners>-->
    </batch:job>
    <batch:step id="stageFilteredItemsSlave" >
        <batch:tasklet>
            <!-- Can add a @skip-limit we can control how many exceptional skips we'll allow before abandoning the
            step. Note that this limit applies separately to reads, processes, and writes. -->
            <batch:chunk reader="singleFilteredCsvItemReader" processor="processedItemValidateProcessor" writer="compositeTableWriter"
                     commit-interval="${batch.upsertitem.commit.interval}" skip-limit="2">
                <!-- List out exceptions which should result in a record simply being skipped, up to some
                configurable limit set on the chunk above -->
                <batch:skippable-exception-classes>
                        <batch:include class="java.lang.Exception"/>
                 </batch:skippable-exception-classes>
                <!-- Step-, chunk-, item-read, item-process, item-write, skip-scoped listeners, if needed. -->
                <batch:listeners>
                     <batch:listener ref="stagingTableItemWriter" />
                     <batch:listener ref="externalTableUpsertItemWriter" />
                     <batch:listener ref="stagingAndUpsertSkipListener" />
                     <batch:listener ref="stagingAndUpsertListener" />
                </batch:listeners>
             </batch:chunk>
        </batch:tasklet>

    </batch:step>
</beans>
